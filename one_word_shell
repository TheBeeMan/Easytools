#!/bin/bash

SHOW_WARNINGS_ONLY=0
QUIET=0
CRONJOB=0

# Normal color names
CYAN="$(printf '\033[0;36m')"
BLUE="$(printf '\033[0;34m')"
BROWN="$(printf '\033[0;33m')"
DARKGRAY="$(printf '\033[0;30m')"
GRAY="$(printf '\033[0;37m')"
GREEN="$(printf '\033[1;32m')"
LIGHTBLUE="$(printf '\033[0;94m')"
MAGENTA="$(printf '\033[1;35m')"
PURPLE="$(printf '\033[0;35m')"
RED="$(printf '\033[1;31m')"
YELLOW="$(printf '\033[1;33m')"
WHITE="$(printf '\033[1;37m')"
# Markup
BOLD="${WHITE}"
# With background
BG_BLUE="$(printf '\033[0;44m')"
# Semantic names
HEADER="${WHITE}"
NORMAL="$(printf '\033[0m')"
WARNING="${RED}"
SECTION="${YELLOW}"
NOTICE="${YELLOW}"
OK="${GREEN}"
BAD="${RED}"

################################################################################
# Name        : RemovePIDFile()
################################################################################

# Remove PID file
RemovePIDFile() {
    # Test if PIDFILE is defined, before checking file presence
    if [ ! "${PIDFILE}" = "" ]; then
        if [ -f ${PIDFILE} ]; then
            rm -f $PIDFILE;
            echo "PID file removed (${PIDFILE})"
        else
            echo "PID file not found (${PIDFILE})"
        fi
    fi
}

################################################################################
# Name        : RemoveTempFiles()
################################################################################

# Remove any temporary files
RemoveTempFiles() {
    if [ ! "${TEMP_FILES}" = "" ]; then
        echo "Temporary files: ${TEMP_FILES}"
        # Clean up temp files
        for FILE in ${TEMP_FILES}; do
            # Temporary files should be in /tmp
            TMPFILE=$(echo ${FILE} | egrep "^/tmp/lynis" | grep -v "\.\.")
            if [ ! "${TMPFILE}" = "" ]; then
                if [ -f ${TMPFILE} ]; then
                    echo "Action: removing temporary file ${TMPFILE}"
                    rm -f ${TMPFILE}
                else
                    echo "Info: temporary file ${TMPFILE} was already removed"
                fi
            else
                echo "Found invalid temporary file (${FILE}), not removed. Check your /tmp directory."
            fi
        done
    else
        echo "No temporary files to be deleted"
    fi
}

################################################################################
# Name        : ExitFatal()
# Description : Perform exit of the program (with code 1), clean up resources
#
# Input       : $1 = text string (optional)
# Returns     : <nothing>
# Usage       : ExitFatal
################################################################################

ExitFatal() {
    RemovePIDFile
    RemoveTempFiles
    echo "${PROGRAM_NAME} ended with exit code 1."
    if [ $# -eq 1 ]; then
        ${ECHOCMD} ""
        ${ECHOCMD} "${RED}Fatal error${NORMAL}: ${WHITE}$1${NORMAL}"
        ${ECHOCMD} ""
    fi
    exit 1
}

################################################################################
# Name        : Display()
# Description : Show text on screen, with markup
#
# Input       : <multiple parameters, see test>
# Returns     : <nothing>
################################################################################

Display() {
    INDENT=0; TEXT=""; RESULT=""; COLOR=""; SPACES=0; SHOWDEBUG=0
    while [ $# -ge 1 ]; do
        case $1 in
            --color)
                shift
                    case $1 in
                      GREEN)   COLOR=$GREEN   ;;
                      RED)     COLOR=$RED     ;;
                      WHITE)   COLOR=$WHITE   ;;
                      YELLOW)  COLOR=$YELLOW  ;;
                    esac
            ;;
            --debug)
                SHOWDEBUG=1
            ;;
            --indent)
                shift
                INDENT=$1
            ;;
            --result)
                shift $(( $# > 0 ? 1 : 0 ))
                RESULT=$1
            ;;
            --text)
                shift $(( $# > 0 ? 1 : 0 ))
                TEXT=$1
            ;;
            *)
                echo "INVALID OPTION (Display): $1"
                ExitFatal
            ;;
        esac
        # Go to next parameter
        shift $(( $# > 0 ? 1 : 0 ))
    done

    if [ -z "${RESULT}" ]; then
        RESULTPART=""
    else
        if [ ${CRONJOB} -eq 0 ]; then
            RESULTPART=" [ ${COLOR}${RESULT}${NORMAL} ]"
        else
            RESULTPART=" [ ${RESULT} ]"
        fi
    fi

    if [ ! -z "${TEXT}" ]; then
        SHOW=0
        TEXTPART="${BLUE}${TEXT}${NORMAL}"
        if [ ${SHOW_WARNINGS_ONLY} == 1 ]; then
            if [ "${RESULT}" = "WARNING" ]; then SHOW=1; fi
        elif [ ${QUIET} == 0 ]; then SHOW=1
        fi

        if [ ${SHOW} -eq 1 ]; then
            # Display:
            # - for full shells, count with -m instead of -c, to support language locale (older busybox does not have -m)
            # - wc needs LANG to deal with multi-bytes characters but LANG has been unset in include/consts
            LINESIZE=$(export LC_ALL= ; export LANG="${DISPLAY_LANG}";echo "${TEXT}" | wc -m | tr -d ' ')
            if [ ${SHOWDEBUG} -eq 1 ]; then DEBUGTEXT=" [${PURPLE}DEBUG${NORMAL}]"; else DEBUGTEXT=""; fi
            if [ ${INDENT} -gt 0 ]; then SPACES=$((62 - INDENT - LINESIZE)); fi
            if [ ${SPACES} -lt 0 ]; then SPACES=0; fi
            if [ ${CRONJOB} -eq 0 ]; then
                # Check if we already have already discovered a proper echo command tool. It not, set it default to 'echo'.
                if [ "${ECHOCMD}" = "" ]; then ECHOCMD="echo"; fi
                ${ECHOCMD} "\033[${INDENT}C${TEXTPART}\033[${SPACES}C${RESULTPART}${DEBUGTEXT}"
            else
                echo "${TEXT}${RESULTPART}"
            fi
        fi
    fi
}

################################################################################
# Name        : PEMCert2CACertForAndroid()
# Description : Show operations that convert regulate pem certificate generate
#               from openssl to root CA certificate for android system.
# Input       : <nothing>
# Returns     : <nothing>
################################################################################
PEMCert2CACertForAndroid() {
    Display --text "[+] convert regulate PEM-formatted self-signed certificate to root CA certificate for android device"
    step1="MD5Value=openssl x509 -inform pem -in SAMPLE.crt -subject_hash_old | head -1"
    step2="cat SAMPLE.crt > MD5Value.0"
    step3="openssl x509 -inform pem -in MD5Value.0 -noout -text >> MD5Value.0"

    Display --indent 4 --text "command: " --color RED --result "${step1}"
    Display --indent 4 --text "command: " --color RED --result "${step2}"
    Display --indent 4 --text "command: " --color RED --result "${step3}"

    echo "\n"
}

################################################################################
# Name	      : CheckSignVersionForAPK()
# Description : determinate signature scheme version for an apk
# Input       : <nothing>
# Returns     : <nothing>
################################################################################
CheckSignVersionForAPK() {
    Display --text "[+] determinate signature scheme version for an apk file"
    step1="apksigner verify -v sample.apk"

    Display --indent 4 --text "command: " --color RED --result "${step1}"
    echo "\n"
}

################################################################################
# Name	      : OpensslGenKeyAndCert()
# Description : generate private key and the corresponding certificate using openssl
# Input       : <nothing>
# Returns     : <nothing>
################################################################################
OpensslGenKeyAndCert() {
    Display --text "[+] generate private key and the corresponding certificate using openssl"
    step1="openssl req -newkey rsa:2048 -nodes -keyout ca.key -x509 -days 365 -out ca.crt"

    Display --indent 4 --text "command: " --color RED --result "${step1}"
    echo "\n"
}

################################################################################
# Name	      : GitDiscardLocalModification()
# Description : discard local cache for modification using git
# Input       : <nothing>
# Returns     : <nothing>
################################################################################
GitDiscardLocalModification() {
    Display --text "[+] numerous cases for discarding local changes in git"

    Display --indent 4 --text "discard local changes if they have not been added yet (Note: can not delete newly created file, just delete them manually)"
    nonAddFileDiscard="git checkout -- changedfile"
    nonAddFoldDiscard="git checkout ."
    Display --indent 8 --text "discard changes for given file" --color RED --result "${nonAddFileDiscard}"
    Display --indent 8 --text "discard changes under given folder" --color RED --result "${nonAddFoldDiscard}"

    Display --indent 4 --text "discard local changes if they have been added while not committed"
    addedFileUnstage="git reset HEAD -- changedfile"
    nonAddFileDiscard="git checkout -- changedfile"
    Display --indent 8 --text "unstage added files and discard changes" --color RED --result "${addedFileUnstage}; ${nonAddFileDiscard}"
    addedFoldUnstage="git reset HEAD ."
    nonAddFoldDiscard="git checkout ."
    Display --indent 8 --text "unstage added folder and discard changes" --color RED --result "${addedFoldUnstage}; ${nonAddFoldDiscard}"

    Display --indent 4 --text "discard local changes if they have been committed"
    backToLastState="git reset --hard HEAD^"
    Display --indent 8 --text "go back to last state" --color RED --result "${backToLastState}"
    backToSpecificState="git reset --hard commtid"
    Display --indent 8 --text "go back to specific state by given commit id" --color RED --result "${backToSpecificState}"
    echo "\n"
}

################################################################################
# Name	      : GetKernelVersion()
# Description : Get kernel version from compressed kernel image
# Input       : <kernel image>
# Returns     : <kernel version>
################################################################################
GetKernelVersion() {
    Display --text "[+] get kernel version from compressed kernel image"

	step1="dd if=sampleImage bs=1 skip=\$(LC_ALL=C grep -a -b -o \$'\\\x1f\\\x8b\\\x08\\\x00\\\x00\\\x00\\\x00\\\x00' sampleImage | head -n 1 | cut -d ':' -f 1) | zcat | grep -a 'Linux version'"
    Display --indent 4 --text "extract from gzip-encoded image: " --color RED --result "${step1}"

	step2="dd if=sampleImage bs=1 skip=\$(LC_ALL=C grep -a -b -o \$'\\\xFD\\\x37\\\x7A\\\x58\\\x5A\\\x00' sampleImage | head -n 1 | cut -d ':' -f 1) | xzcat | grep -a 'Linux version'"
    Display --indent 4 --text "extract from xz-encoded image: " --color RED --result "${step2}"
    echo "\n"
}

################################################################################
# Name	      : SignUserApkAsSystem()
# Description : Sign a user level app as a system permission enabled app
# Input       : <platform.x509.pem, platform.pk8, userSample.apk>
# Returns     : <systemPermEnabled.apk>
################################################################################
SignUserApkAsSystem() {
    Display --text "[+] Sign a user level app as a system permission enabled app"

	step1="openssl pkcs8 -in platform.pk8 -inform DER -outform PEM -out shared.priv.pem -nocrypt"
    Display --indent 4 --text "convert DER-formatted private key to PEM-formatted key" --color RED --result "${step1}"

	step2="openssl pkcs12 -export -in platform.x509.pem -inkey shared.priv.pem -out shared.pk12 -name androiddebugkey"
    Display --indent 4 --text "combine certificate with private key" --color RED --result "${step2}"

	step3="keytool -importkeystore -deststorepass android -destkeypass android -destkeystore debug.keystore -srckeystore shared.pk12 -srcstoretype PKCS12 -srcstorepass android -alias androiddebugkey"
    Display --indent 4 --text "generate keystore file" --color RED --result "${step3}"

	step4="java -jar apksigner.jar sign --ks debug.keystore --in user.apk -out system.apk"
    Display --indent 4 --text "sign apk with system signature" --color RED --result "${step4}"
    echo "\n"
}

################################################################################
# Name        : PackTargzArchive()
# Description : By default, pigz uses the number of available cores, or eight
#               if it could not query that. You can ask for more with -p n, e.g.
#               -p 32. pigz has the same options as gzip, so you can request better
#               compression with -9. E.g.
# Input       : <directory for compression>
# Returns     : <compressed package>
################################################################################
PackTargzArchive() {
    Display --text "[+] pack .tar.gz formatted file with better compression and multiple cores"

    step1="tar cf - paths-to-archive | pigz -9 -p 32 > archive.tar.gz"
    Display --indent 4 --text "prioritized: " --color RED --result "${step1}"

    step2="tar -c --use-compress-program=pigz -f archive.tar.gz paths-to-archive"
    Display --indent 4 --text "secondary: " --color RED --result "${step2}"
    echo "\n"
}

################################################################################
# Name        : FastTransmitOverSsh()
# Description : The best way for transmitting file over ssh protocol, it can support
#               resuming from break-point and comression transmition
# Input       : <directory for compression>
# Returns     : <compressed package>
################################################################################
FastTransmitOverSsh() {
    Display --text "[+] resuming from break-point and comression transmition via rsync over SSH protocol"
    step1="spawn rsync -avzP -e 'ssh -pPORT' USER@$HOST:/PATH-TO-SOURCE /PATH-TO-LOCAL"
    Display --indent 4 --text "command: " --color RED --result "${step1}"
    echo "\n"
}

################################################################################
# Name        : GitManagerOverSpecKey()
# Description : Manage your github with specific SSH credentials, including a pair of
#               public key and private key, configure your private key for further operation
# Input       : <private key file path>
# Returns     : <nothing>
################################################################################
GitManagerOverSpecKey() {
    Display --text "[+] Enter your local git project folder, and then configure your github repo with a specific SSH credentials"
    step1="git config core.sshCommand \"ssh -i ~/.ssh/your_private_key  -o 'IdentitiesOnly yes'\""
    Display --indent 4 --text "configure credential: " --color RED --result "${step1}"
    step2="git config user.email \"thebeemangg@gmail.com\" ; git config user.name \"soh0ro0t\""
    Display --indent 4 --text "configure user: " --color RED --result "${step2}"
    echo "\n"
}

################################################################################
# Name        : RegexOfIpv4Addr()
# Description : A regex expression of ipv4 address which is widely used.
# Input       : <nothing>
# Returns     : <nothing>
################################################################################
RegexOfIpv4Addr() {
    Display --text "[+] A regex expression of ipv4 address which is widely used"
    step1="(25[0-5]|[2[0-4][0-9]|[01]?[0-9][0-9]?])(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}"
    Display --indent 4 --text "regex" --color RED --result "${step1}"
    echo "\n"
}

PEMCert2CACertForAndroid

SignUserApkAsSystem

CheckSignVersionForAPK

OpensslGenKeyAndCert

GitDiscardLocalModification

GetKernelVersion

PackTargzArchive

FastTransmitOverSsh

GitManagerOverSpecKey

RegexOfIpv4Addr
